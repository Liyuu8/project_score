rules_version = '2';

service cloud.firestore {
  function isAuthorsOrPublicData() {
    return resource.data.isPublic == true || request.auth.uid == resource.data.authorId;
  }

  function isAuthorsRequestData() {
    return request.auth.uid == request.resource.data.authorId;
  }

  function isAuthorsData() {
    return request.auth.uid == resource.data.authorId;
  }

  function isValidUser(user) {
    return user.size() == 10
      && 'inAppUserId' in user && user.inAppUserId is string
      && 'displayName' in user
      && (user.displayName is string || user.displayName == null)
      && 'inAppUserName' in user && user.inAppUserName is string
      && 'email' in user && user.email is string
      && 'bio' in user && user.bio is string
      && 'photoUrl' in user
      && (user.photoUrl is string || user.photoUrl == null)
      && 'createdAt' in user && user.createdAt is timestamp
      && 'updatedAt' in user && user.updatedAt is timestamp;
  }

  match /databases/{database}/documents {
    match /projects/{document=**} {
      allow read: if isAuthorsOrPublicData();
      allow create: if isAuthorsRequestData();
      allow update, delete: if isAuthorsData();
    }

    match /users/{userId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == userId
        && isValidUser(request.resource.data)
        && request.resource.data.createdAt == request.time
        && request.resource.data.updatedAt == request.time;
      allow update: if request.auth != null && request.auth.uid == userId
        && isValidUser(request.resource.data)
        && request.resource.data.updatedAt == request.time
        && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}

// https://firebase.google.com/docs/firestore/security/rules-conditions?hl=ja
// https://firebase.google.com/docs/firestore/security/rules-query?hl=ja
